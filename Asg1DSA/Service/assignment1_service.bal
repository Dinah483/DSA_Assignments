// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

listener http:Listener ep0 = new (9090, config = {host: "localhost"});

table<Lecturer> key(staffNumber) lecturersTable = table[];
service / on ep0 {
    
    # Get a list of all lecturers
    #
    # + return - A list of lecturers 
    resource function get lecturers() returns Lecturer[] {
        Lecturer[] lecturers = [];
        foreach var lecturer in lecturersTable {
            lecturers.push(lecturer);
        }
        return lecturers;
    }
    # Add a new lecturer
    #
    # + payload - parameter description 
    # + return - Lecturer created successfully 
    resource function post lecturers(@http:Payload Lecturer payload) returns Lecturer {
        lecturersTable.add(payload);
        return payload;
    }
    # Get details of a specific lecturer by staff number
    #
    # + staffNumber - parameter description 
    # + return - Lecturer details 
    resource function get lecturers/[string staffNumber]() returns Lecturer|http:Response {
        string requestedStaffNumber = staffNumber;
        Lecturer? foundLecturer = lecturersTable[requestedStaffNumber];
        if (foundLecturer != ()) {
            return foundLecturer;
        }
        // Handle lecturer not found case
        http:Response res = new;
        res.statusCode = http:STATUS_NOT_FOUND;
        res.setPayload("Lecturer not found");
        return res;
    }
    # Update an existing lecturer's information
    #
    # + staffNumber - parameter description 
    # + payload - parameter description 
    # + return - Lecturer updated successfully 
   resource function put lecturers/[string staffNumber](@http:Payload Lecturer payload) returns Lecturer|http:Response {
        string requestedStaffNumber = staffNumber;
        Lecturer? existingLecturer = lecturersTable[requestedStaffNumber];
        if (existingLecturer != ()) {
    map<string> lecturerMap = {};
    lecturerMap[requestedStaffNumber] = payload.toJsonString();
            return payload;
        }
        // Handle lecturer not found case
        http:Response res = new;
        res.statusCode = http:STATUS_NOT_FOUND;
        res.setPayload("Lecturer not found");
        return res;
    }
    # Delete a lecturer by staff number
    #
    # + staffNumber - parameter description 
    # + return - No content 
    // Define a resource function to delete a lecturer by name
resource function delete lecturers/[string staffNumber]() returns string {
    // Extract the staff name from the path parameter
    string requestedStaffName = staffNumber;

    // Remove the lecturer from the table based on the staff name
    Lecturer? removedLecturer = lecturersTable.remove(requestedStaffName);

    if (removedLecturer != null) {
        return requestedStaffName + " successfully deleted";
    } else {
        return requestedStaffName + " not found";
    }
}

    # Get all lecturers teaching a certain course
    #
    # + courseCode - parameter description 
    # + return - A list of lecturers 
   resource function get lectcourses/[string courseCode]/lecturers() returns Lecturer[] {
    string requestedCourseCode = courseCode;
    Lecturer[] lecturersTeachingCourse = [];
    foreach var lecturer in lecturersTable {
        boolean hasCourse = false;
        foreach var course in lecturer.courses {
            if (course.courseCode == requestedCourseCode) {
                hasCourse = true;
                break;
            }
        }
        if (hasCourse) {
            lecturersTeachingCourse.push(lecturer);
        }
    }
    return lecturersTeachingCourse;
}

    # Get all lecturers sitting in the same office
    #
    # + officeNumber - parameter description 
    # + return - A list of lecturers 
    resource function get offices/[string officeNumber]/lecturers() returns Lecturer[] {
        string requestedOfficeNumber = officeNumber;
        Lecturer[] lecturersInOffice = [];
        foreach var lecturer in lecturersTable {
            if (requestedOfficeNumber == lecturer.officeNumber) {
                lecturersInOffice.push(lecturer);
            }
        }
        return lecturersInOffice;
    }
}